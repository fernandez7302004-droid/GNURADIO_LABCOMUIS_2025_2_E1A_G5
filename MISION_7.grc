options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: MISION_7
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: A
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.001'
    stop: '1'
    value: '0.5'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 32.0]
    rotation: 0
    state: enabled
- name: N
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.001'
    stop: '1'
    value: '0.2'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 32.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '256000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 12]
    rotation: 0
    state: enabled
- name: analog_noise_source_x_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: N
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 312.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: A
    comment: ''
    freq: '1000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    showports: 'False'
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 136.0]
    rotation: 0
    state: disabled
- name: blocks_complex_to_float_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 488.0]
    rotation: 0
    state: enabled
- name: blocks_stream_to_vector_decimator_0
  id: blocks_stream_to_vector_decimator
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: samp_rate
    type: complex
    vec_rate: '30'
    vlen: '1024'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 200.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 240.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass PowerEstimator(gr.sync_block):\n\
      \    \"\"\"\n    PowerEstimator: recibe vectores y calcula potencia promedio\
      \ por ventana.\n    Par\xE1metros:\n        vector_length=1024\n        assume_analytic=False\
      \  -> si True, devuelve (mean(|x|^2)/2) (\xFAtil si la entrada es\n        \
      \                          la se\xF1al anal\xEDtica compleja que representa\
      \ una portadora real)\n    Se\xF1ales:\n        in_sig = [(np.complex64, vector_length)]\
      \  (o cambiar a np.float32 si usas se\xF1ales reales)\n        out_sig = [np.float32]\n\
      \    \"\"\"\n\n    def __init__(self, vector_length=1024, assume_analytic=False):\n\
      \        gr.sync_block.__init__(\n            self,\n            name=\"PowerEstimator\"\
      ,\n            in_sig=[(np.complex64, int(vector_length))],\n            out_sig=[np.float32]\n\
      \        )\n        self.vector_length = int(vector_length)\n        # Si la\
      \ entrada es real (float), aqu\xED ser\xEDa mejor usar in_sig = [(np.float32,\
      \ vector_length)]\n        self.assume_analytic = bool(assume_analytic)\n\n\
      \    def work(self, input_items, output_items):\n        in0 = input_items[0]\
      \         # shape (n_items, vector_length)\n        out0 = output_items[0] \
      \      # shape (n_items,)\n\n        # potencia por ventana: mean(|x|^2)\n \
      \       powers = np.mean(np.abs(in0)**2, axis=1)\n\n        if self.assume_analytic:\n\
      \            # Si la se\xF1al es anal\xEDtica que representa una portadora real,\
      \ dividir por 2\n            powers = powers * 0.5\n\n        out0[:] = powers.astype(np.float32)\n\
      \        return len(out0)\n\n\n"
    affinity: ''
    alias: ''
    assume_analytic: 'True'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vector_length: '1024'
  states:
    _io_cache: "('PowerEstimator', 'PowerEstimator', [('vector_length', '1024'), ('assume_analytic',\
      \ 'False')], [('0', 'complex', 1024)], [('0', 'float', 1)], '\\n    PowerEstimator:\
      \ recibe vectores y calcula potencia promedio por ventana.\\n    Par\xE1metros:\\\
      n        vector_length=1024\\n        assume_analytic=False  -> si True, devuelve\
      \ (mean(|x|^2)/2) (\xFAtil si la entrada es\\n                             \
      \     la se\xF1al anal\xEDtica compleja que representa una portadora real)\\\
      n    Se\xF1ales:\\n        in_sig = [(np.complex64, vector_length)]  (o cambiar\
      \ a np.float32 si usas se\xF1ales reales)\\n        out_sig = [np.float32]\\\
      n    ', ['assume_analytic', 'vector_length'])"
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 312.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass AmplitudeStats(gr.sync_block):\n\
      \    \"\"\"\n    AmplitudeStats: recibe una entrada por item que es un VECTOR\
      \ de muestras complejas\n    (dtype np.complex64) y produce DOS salidas por\
      \ item (float32):\n      out[0] = media de la magnitud\n      out[1] = desviaci\xF3\
      n est\xE1ndar de la magnitud\n    Constructor:\n        AmplitudeStats(vector_length=1024)\n\
      \    Se\xF1ales:\n        in_sig = [(np.complex64, vector_length)]\n       \
      \ out_sig = [np.float32, np.float32]\n    \"\"\"\n\n    def __init__(self, vector_length=1024):\n\
      \        gr.sync_block.__init__(\n            self,\n            name=\"AmplitudeStats\"\
      ,\n            in_sig=[(np.complex64, int(vector_length))],\n            out_sig=[np.float32,\
      \ np.float32]\n        )\n        self.vector_length = int(vector_length)\n\n\
      \    def work(self, input_items, output_items):\n        \"\"\"\n        input_items[0]\
      \ shape: (n_items, vector_length)\n        output_items[0] and output_items[1]\
      \ shape: (n_items,)\n        Calcula media y std de la magnitud para cada ventana.\n\
      \        \"\"\"\n        in0 = input_items[0]\n        out_mean = output_items[0]\n\
      \        out_std = output_items[1]\n\n        mags = np.abs(in0)           \
      \                # shape (n_items, vector_length)\n        means = np.mean(mags,\
      \ axis=1)               # shape (n_items,)\n        stds = np.std(mags, axis=1)\
      \                 # shape (n_items,) ddof=0\n\n        out_mean[:] = means.astype(np.float32)\n\
      \        out_std[:] = stds.astype(np.float32)\n\n        return len(out_mean)\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vector_length: '1024'
  states:
    _io_cache: "('AmplitudeStats', 'AmplitudeStats', [('vector_length', '1024')],\
      \ [('0', 'complex', 1024)], [('0', 'float', 1), ('1', 'float', 1)], '\\n   \
      \ AmplitudeStats: recibe una entrada por item que es un VECTOR de muestras complejas\\\
      n    (dtype np.complex64) y produce DOS salidas por item (float32):\\n     \
      \ out[0] = media de la magnitud\\n      out[1] = desviaci\xF3n est\xE1ndar de\
      \ la magnitud\\n    Constructor:\\n        AmplitudeStats(vector_length=1024)\\\
      n    Se\xF1ales:\\n        in_sig = [(np.complex64, vector_length)]\\n     \
      \   out_sig = [np.float32, np.float32]\\n    ', ['vector_length'])"
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 184.0]
    rotation: 0
    state: enabled
- name: qtgui_histogram_sink_x_0_0
  id: qtgui_histogram_sink_x
  parameters:
    accum: 'True'
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    bins: '100'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Histograma"'
    nconnections: '2'
    size: '1024'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '1'
    xmin: '-1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 444.0]
    rotation: 0
    state: enabled
- name: qtgui_number_sink_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"MEDIA"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1224, 104.0]
    rotation: 0
    state: enabled
- name: qtgui_number_sink_1
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"DESV.ESTANDAR"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1232, 248.0]
    rotation: 0
    state: enabled
- name: qtgui_number_sink_1_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"POTENCIA"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1232, 376.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 352.0]
    rotation: 0
    state: enabled

connections:
- [analog_noise_source_x_0, '0', blocks_throttle_0, '0']
- [analog_sig_source_x_0, '0', blocks_throttle_0, '0']
- [blocks_complex_to_float_0, '0', qtgui_histogram_sink_x_0_0, '0']
- [blocks_complex_to_float_0, '1', qtgui_histogram_sink_x_0_0, '1']
- [blocks_stream_to_vector_decimator_0, '0', epy_block_0, '0']
- [blocks_stream_to_vector_decimator_0, '0', epy_block_1, '0']
- [blocks_throttle_0, '0', blocks_complex_to_float_0, '0']
- [blocks_throttle_0, '0', blocks_stream_to_vector_decimator_0, '0']
- [blocks_throttle_0, '0', qtgui_time_sink_x_0_0_0, '0']
- [epy_block_0, '0', qtgui_number_sink_1_0, '0']
- [epy_block_1, '0', qtgui_number_sink_0, '0']
- [epy_block_1, '1', qtgui_number_sink_1, '0']

metadata:
  file_format: 1
  grc_version: v3.10.11.0-89-ga17f69e7
